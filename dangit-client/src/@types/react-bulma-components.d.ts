/* tslint:disable */
/** Declaration file generated by dts-gen */
declare module 'react-bulma-components' {
export class Dropdown {
    constructor(...args: any[]);

    componentDidMount(): void;

    componentWillUnmount(): void;

    render(): any;

    static Divider(e: any): any;

    static Item(e: any): any;

    static defaultProps: {
        align: any;
        backgroundColor: any;
        children: any[];
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        hoverable: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        onChange: any;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
        value: any;
    };

}

export class Image {
    constructor(...args: any[]);

    render(): any;

    static defaultProps: {
        alt: string;
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        fallback: string;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        src: string;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    static getDerivedStateFromProps(e: any, t: any): any;

}

export class Modal extends React.PureComponent {
    constructor(...args: any[]);

    componentDidMount(): void;

    componentWillUnmount(): void;

    render(): any;

    static Card(e: any): any;

    static Content(e: any): any;

    static defaultProps: {
        className: string;
        closeOnBlur: boolean;
        closeOnEsc: boolean;
        document: any;
        showClose: boolean;
    };

}

export class Navbar {
    constructor(...args: any[]);

    componentWillUnmount(): void;

    render(): any;

    static Brand(e: any): any;

    static Burger(e: any): any;

    static Container(e: any): any;

    static Divider(e: any): any;

    static Dropdown(e: any): any;

    static Item(e: any): any;

    static Link(e: any): any;

    static Menu(e: any): any;

    static defaultProps: {
        active: boolean;
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        fixed: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        transparent: boolean;
        unselectable: boolean;
    };

    static getDerivedStateFromProps(e: any): any;

}

export class Pagination {
    constructor(...args: any[]);

    render(): any;

}

export function Box(e: any): any;

export function Breadcrumb(e: any): any;

export function Button(e: any): any;

export function Card(e: any): any;

export function Columns(e: any): any;

export function Container(e: any): any;

export function Content(e: any): any;

export function Element(e: any): any;

export function Footer(e: any): any;

export function Heading(e: any): any;

export function Hero(e: any): any;

export function Icon(e: any): any;

export function Level(e: any): any;

export function Loader(e: any): any;

export function Media(e: any): any;

export function Menu(e: any): any;

export function Message(e: any): any;

export function Notification(e: any): any;

export function Panel(e: any): any;

export function Progress(e: any): any;

export function Section(e: any): any;

export function Table(e: any): any;

export function Tabs(e: any): any;

export function Tag(e: any): any;

export function Tile(e: any): any;

export namespace Box {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Breadcrumb {
    const defaultProps: {
        align: any;
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        hrefAttr: any;
        invisible: boolean;
        italic: boolean;
        items: any[];
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        separator: any;
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hrefAttr(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function items(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function separator(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace align {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hrefAttr {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace items {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace separator {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Button {
    const prototype: {
    };

    namespace defaultProps {
        const backgroundColor: any;

        const children: any;

        const className: string;

        const clearfix: boolean;

        const clipped: boolean;

        const color: any;

        const disabled: boolean;

        const fullwidth: boolean;

        const hidden: boolean;

        const inverted: boolean;

        const invisible: boolean;

        const isStatic: boolean;

        const italic: boolean;

        const loading: boolean;

        const marginless: boolean;

        const outlined: boolean;

        const overlay: boolean;

        const paddingless: boolean;

        const pull: any;

        const radiusless: boolean;

        const remove: boolean;

        const renderAs: string;

        const reset: boolean;

        const responsive: {
        };

        const rounded: boolean;

        const shadowless: boolean;

        const size: any;

        const state: any;

        const style: {
        };

        const submit: boolean;

        const text: boolean;

        const textAlignment: any;

        const textColor: any;

        const textSize: any;

        const textTransform: any;

        const textWeight: any;

        const unselectable: boolean;

        function onClick(): any;

        namespace onClick {
            const prototype: {
            };

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function fullwidth(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function inverted(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function isStatic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function loading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function onClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function outlined(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function remove(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function reset(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function rounded(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function state(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function submit(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function text(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace disabled {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace fullwidth {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace inverted {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace isStatic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace loading {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace onClick {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace outlined {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace remove {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace reset {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace rounded {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace state {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace submit {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace text {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Card {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Content(e: any): any;

    function Footer(e: any): any;

    function Header(e: any): any;

    function Image(e: any): any;

    namespace Content {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Card.Content.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Footer {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Item(e: any): any;

        namespace Item {
            const defaultProps: {
                backgroundColor: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Footer.Item.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Card.Footer.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Header {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Icon(e: any): any;

        function Title(e: any): any;

        namespace Icon {
            const defaultProps: {
                backgroundColor: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Icon.propTypes
                const unselectable: any;

            }

        }

        namespace Title {
            const defaultProps: {
                backgroundColor: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Card.Header.Title.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Card.Header.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Image {
        const defaultProps: {
            alt: string;
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            fallback: string;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            src: string;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function alt(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function fallback(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function src(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace alt {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.alt
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.clipped
                const isRequired: any;

            }

            namespace fallback {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.fallback
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.size
                const isRequired: any;

            }

            namespace src {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.src
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Card.Image.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Columns {
    const CONSTANTS: {
        SIZES: {
            FOURFIFTHS: string;
            HALF: string;
            ONEFIFTH: string;
            ONEQUARTER: string;
            ONETHIRD: string;
            THREEFIFTHS: string;
            THREEQUARTERS: string;
            TWOFIFTHS: string;
            TWOTHIRDS: string;
        };
    };

    const defaultProps: {
        backgroundColor: any;
        breakpoint: any;
        centered: boolean;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        gapless: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        multiline: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Column(e: any): any;

    namespace Column {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            desktop: {
                narrow: boolean;
                offset: any;
                size: any;
            };
            fullhd: {
                narrow: boolean;
                offset: any;
                size: any;
            };
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            mobile: {
                narrow: boolean;
                offset: any;
                size: any;
            };
            narrow: boolean;
            offset: any;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            style: {
            };
            tablet: {
                narrow: boolean;
                offset: any;
                size: any;
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
            widescreen: {
                narrow: boolean;
                offset: any;
                size: any;
            };
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function desktop(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function fullhd(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function mobile(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function narrow(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function offset(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function tablet(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function widescreen(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.clipped
                const isRequired: any;

            }

            namespace desktop {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.desktop
                const isRequired: any;

            }

            namespace fullhd {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.fullhd
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.marginless
                const isRequired: any;

            }

            namespace mobile {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.mobile
                const isRequired: any;

            }

            namespace narrow {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.narrow
                const isRequired: any;

            }

            namespace offset {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.offset
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.style
                const isRequired: any;

            }

            namespace tablet {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.tablet
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.unselectable
                const isRequired: any;

            }

            namespace widescreen {
                // Too-deep object hierarchy from react_bulma_components.Columns.Column.propTypes.widescreen
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function breakpoint(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function centered(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function gapless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function multiline(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace breakpoint {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace centered {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace gapless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace multiline {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Container {
    const defaultProps: {
        backgroundColor: any;
        breakpoint: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        fluid: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function breakpoint(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function fluid(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace breakpoint {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace fluid {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Content {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Dropdown {
    namespace Divider {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Divider.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Item {
        const defaultProps: {
            active: boolean;
            backgroundColor: any;
            children: any;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            onClick: any;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function active(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function onClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace active {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.active
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.children
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.marginless
                const isRequired: any;

            }

            namespace onClick {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.onClick
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Dropdown.Item.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hoverable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function onChange(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace align {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hoverable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace onChange {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace value {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isPureReactComponent: boolean;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Element {
    const defaultProps: {
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Footer {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Form {
    function Checkbox(e: any): any;

    function Control(e: any): any;

    function Field(e: any): any;

    function Help(e: any): any;

    function Input(e: any): any;

    function Label(e: any): any;

    function Radio(e: any): any;

    function Select(e: any): any;

    function Textarea(e: any): any;

    namespace Checkbox {
        const defaultProps: {
            backgroundColor: any;
            checked: boolean;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            disabled: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            name: any;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
            value: string;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function checked(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace checked {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.checked
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.clipped
                const isRequired: any;

            }

            namespace disabled {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.disabled
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.marginless
                const isRequired: any;

            }

            namespace name {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.name
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.unselectable
                const isRequired: any;

            }

            namespace value {
                // Too-deep object hierarchy from react_bulma_components.Form.Checkbox.propTypes.value
                const isRequired: any;

            }

        }

    }

    namespace Control {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            fullwidth: boolean;
            hidden: boolean;
            iconLeft: boolean;
            iconRight: boolean;
            invisible: boolean;
            italic: boolean;
            loading: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function fullwidth(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function iconLeft(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function iconRight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function loading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.clipped
                const isRequired: any;

            }

            namespace fullwidth {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.fullwidth
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.hidden
                const isRequired: any;

            }

            namespace iconLeft {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.iconLeft
                const isRequired: any;

            }

            namespace iconRight {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.iconRight
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.italic
                const isRequired: any;

            }

            namespace loading {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.loading
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Control.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Field {
        const defaultProps: {
            align: any;
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            horizontal: boolean;
            invisible: boolean;
            italic: boolean;
            kind: any;
            marginless: boolean;
            multiline: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Body(e: any): any;

        function Label(e: any): any;

        namespace Body {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Body.propTypes
                const unselectable: any;

            }

        }

        namespace Label {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                size: any;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const size: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Form.Field.Label.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function horizontal(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function kind(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function multiline(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace align {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.align
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.hidden
                const isRequired: any;

            }

            namespace horizontal {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.horizontal
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.italic
                const isRequired: any;

            }

            namespace kind {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.kind
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.marginless
                const isRequired: any;

            }

            namespace multiline {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.multiline
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Field.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Help {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            color: any;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.clipped
                const isRequired: any;

            }

            namespace color {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.color
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Help.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Input {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            color: any;
            disabled: boolean;
            hidden: boolean;
            invisible: boolean;
            isStatic: boolean;
            italic: boolean;
            marginless: boolean;
            name: any;
            overlay: boolean;
            paddingless: boolean;
            placeholder: string;
            pull: any;
            radiusless: boolean;
            readOnly: boolean;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            type: string;
            unselectable: boolean;
            value: string;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function isStatic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function placeholder(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function readOnly(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function type(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.clipped
                const isRequired: any;

            }

            namespace color {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.color
                const isRequired: any;

            }

            namespace disabled {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.disabled
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.invisible
                const isRequired: any;

            }

            namespace isStatic {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.isStatic
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.marginless
                const isRequired: any;

            }

            namespace name {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.name
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.paddingless
                const isRequired: any;

            }

            namespace placeholder {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.placeholder
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.radiusless
                const isRequired: any;

            }

            namespace readOnly {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.readOnly
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.textWeight
                const isRequired: any;

            }

            namespace type {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.type
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.unselectable
                const isRequired: any;

            }

            namespace value {
                // Too-deep object hierarchy from react_bulma_components.Form.Input.propTypes.value
                const isRequired: any;

            }

        }

    }

    namespace Label {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            htmlFor: any;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function htmlFor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.hidden
                const isRequired: any;

            }

            namespace htmlFor {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.htmlFor
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Label.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Radio {
        const defaultProps: {
            backgroundColor: any;
            checked: boolean;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            disabled: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
            value: string;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function checked(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace checked {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.checked
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.clipped
                const isRequired: any;

            }

            namespace disabled {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.disabled
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.unselectable
                const isRequired: any;

            }

            namespace value {
                // Too-deep object hierarchy from react_bulma_components.Form.Radio.propTypes.value
                const isRequired: any;

            }

        }

    }

    namespace Select {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            color: any;
            disabled: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            loading: boolean;
            marginless: boolean;
            multiple: boolean;
            name: any;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            readOnly: boolean;
            responsive: {
            };
            shadowless: boolean;
            size: any;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
            value: string;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function loading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function multiple(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function readOnly(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.clipped
                const isRequired: any;

            }

            namespace color {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.color
                const isRequired: any;

            }

            namespace disabled {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.disabled
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.italic
                const isRequired: any;

            }

            namespace loading {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.loading
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.marginless
                const isRequired: any;

            }

            namespace multiple {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.multiple
                const isRequired: any;

            }

            namespace name {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.name
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.radiusless
                const isRequired: any;

            }

            namespace readOnly {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.readOnly
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.unselectable
                const isRequired: any;

            }

            namespace value {
                // Too-deep object hierarchy from react_bulma_components.Form.Select.propTypes.value
                const isRequired: any;

            }

        }

    }

    namespace Textarea {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            color: any;
            disabled: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            name: string;
            overlay: boolean;
            paddingless: boolean;
            placeholder: string;
            pull: any;
            radiusless: boolean;
            readOnly: boolean;
            responsive: {
            };
            rows: number;
            shadowless: boolean;
            size: any;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
            value: string;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function disabled(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function name(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function placeholder(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function readOnly(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function rows(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.clipped
                const isRequired: any;

            }

            namespace color {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.color
                const isRequired: any;

            }

            namespace disabled {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.disabled
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.marginless
                const isRequired: any;

            }

            namespace name {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.name
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.paddingless
                const isRequired: any;

            }

            namespace placeholder {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.placeholder
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.radiusless
                const isRequired: any;

            }

            namespace readOnly {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.readOnly
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.responsive
                const isRequired: any;

            }

            namespace rows {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.rows
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.shadowless
                const isRequired: any;

            }

            namespace size {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.size
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.unselectable
                const isRequired: any;

            }

            namespace value {
                // Too-deep object hierarchy from react_bulma_components.Form.Textarea.propTypes.value
                const isRequired: any;

            }

        }

    }

}

export namespace Heading {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        heading: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        spaced: boolean;
        style: {
        };
        subtitle: boolean;
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
        weight: any;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function heading(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function spaced(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function subtitle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function weight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace heading {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace spaced {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace subtitle {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace weight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Hero {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        gradient: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Body(e: any): any;

    function Footer(e: any): any;

    function Head(e: any): any;

    namespace Body {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Hero.Body.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Footer {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Hero.Footer.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Head {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Hero.Head.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function gradient(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace gradient {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Icon {
    const defaultProps: {
        align: any;
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        icon: any;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function icon(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace align {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace icon {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Image {
    namespace getDerivedStateFromProps {
        const prototype: {
        };

    }

    namespace propTypes {
        function alt(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function fallback(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function src(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace alt {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace fallback {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace src {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isPureReactComponent: boolean;

        const isReactComponent: {
        };

        const replaceState: any;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Level {
    const defaultProps: {
        backgroundColor: any;
        breakpoint: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Item(e: any): any;

    function Side(e: any): any;

    namespace Item {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Level.Item.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Side {
        const defaultProps: {
            align: string;
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace align {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.align
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Level.Side.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function breakpoint(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace breakpoint {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Loader {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Media {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Content(e: any): any;

    function Item(e: any): any;

    namespace Content {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Media.Content.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Item {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            position: string;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function position(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.paddingless
                const isRequired: any;

            }

            namespace position {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.position
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Media.Item.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Menu {
    const defaultProps: {
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function List(e: any): any;

    namespace List {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            title: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Item(e: any): any;

        namespace Item {
            const defaultProps: {
                active: boolean;
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const active: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Menu.List.Item.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function title(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.textWeight
                const isRequired: any;

            }

            namespace title {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.title
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Menu.List.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Message {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Body(e: any): any;

    function Header(e: any): any;

    namespace Body {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Message.Body.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Header {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Message.Header.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Modal {
    namespace Card {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            onClose: any;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Body(e: any): any;

        function Foot(e: any): any;

        function Head(e: any): any;

        function Title(e: any): any;

        namespace Body {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                responsive: {
                };
                shadowless: boolean;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Body.propTypes
                const unselectable: any;

            }

        }

        namespace Foot {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                responsive: {
                };
                shadowless: boolean;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Foot.propTypes
                const unselectable: any;

            }

        }

        namespace Head {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                onClose: any;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                responsive: {
                };
                shadowless: boolean;
                showClose: boolean;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const onClose: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const showClose: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Head.propTypes
                const unselectable: any;

            }

        }

        namespace Title {
            const defaultProps: {
                backgroundColor: any;
                children: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                responsive: {
                };
                shadowless: boolean;
                style: {
                };
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const children: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const style: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Modal.Card.Title.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function onClose(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.marginless
                const isRequired: any;

            }

            namespace onClose {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.onClose
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Modal.Card.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Content {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Modal.Content.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function closeOnBlur(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function closeOnEsc(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function document(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function onClose(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function show(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function showClose(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace closeOnBlur {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace closeOnEsc {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace document {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace showClose {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isPureReactComponent: boolean;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentDidMount(): void;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentDidMount {
            const prototype: {
            };

        }

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Navbar {
    namespace Brand {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Brand.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Burger {
        const prototype: {
        };

        namespace defaultProps {
            const backgroundColor: any;

            const className: string;

            const clearfix: boolean;

            const clipped: boolean;

            const hidden: boolean;

            const invisible: boolean;

            const italic: boolean;

            const marginless: boolean;

            const overlay: boolean;

            const paddingless: boolean;

            const pull: any;

            const radiusless: boolean;

            const responsive: {
            };

            const shadowless: boolean;

            const style: {
            };

            const textAlignment: any;

            const textColor: any;

            const textSize: any;

            const textTransform: any;

            const textWeight: any;

            const unselectable: boolean;

            function onClick(): void;

            namespace onClick {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.defaultProps.onClick
                const prototype: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function onClick(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.marginless
                const isRequired: any;

            }

            namespace onClick {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.onClick
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Burger.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Container {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            position: string;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function position(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.paddingless
                const isRequired: any;

            }

            namespace position {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.position
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Container.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Divider {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Divider.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Dropdown {
        const defaultProps: {
            backgroundColor: any;
            boxed: boolean;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            right: boolean;
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function boxed(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function right(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace boxed {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.boxed
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.responsive
                const isRequired: any;

            }

            namespace right {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.right
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Dropdown.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Item {
        const defaultProps: {
            active: boolean;
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            dropdown: boolean;
            dropdownUp: boolean;
            hidden: boolean;
            hoverable: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function active(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function dropdown(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function dropdownUp(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hoverable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace active {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.active
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.clipped
                const isRequired: any;

            }

            namespace dropdown {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.dropdown
                const isRequired: any;

            }

            namespace dropdownUp {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.dropdownUp
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.hidden
                const isRequired: any;

            }

            namespace hoverable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.hoverable
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Item.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Link {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Link.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Menu {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Navbar.Menu.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace getDerivedStateFromProps {
        const prototype: {
        };

    }

    namespace propTypes {
        function active(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function fixed(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function transparent(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace active {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace fixed {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace transparent {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isPureReactComponent: boolean;

        const isReactComponent: {
        };

        const replaceState: any;

        function componentWillUnmount(): void;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace componentWillUnmount {
            const prototype: {
            };

        }

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Notification {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Pagination {
    namespace defaultProps {
        const autoHide: boolean;

        const backgroundColor: any;

        const className: string;

        const clearfix: boolean;

        const clipped: boolean;

        const current: number;

        const delta: number;

        const hidden: boolean;

        const invisible: boolean;

        const italic: boolean;

        const marginless: boolean;

        const next: string;

        const overlay: boolean;

        const paddingless: boolean;

        const previous: string;

        const pull: any;

        const radiusless: boolean;

        const responsive: {
        };

        const shadowless: boolean;

        const showPrevNext: boolean;

        const textAlignment: any;

        const textColor: any;

        const textSize: any;

        const textTransform: any;

        const textWeight: any;

        const total: number;

        const unselectable: boolean;

        function onChange(): void;

        namespace onChange {
            const prototype: {
            };

        }

    }

    namespace propTypes {
        function autoHide(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function current(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function delta(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function next(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function onChange(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function previous(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function showPrevNext(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function total(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace autoHide {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace current {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace delta {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace next {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace onChange {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace previous {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace showPrevNext {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace total {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

    namespace prototype {
        const isMounted: any;

        const isPureReactComponent: boolean;

        const isReactComponent: {
        };

        const replaceState: any;

        function forceUpdate(callback: any): void;

        function render(): any;

        function setState(partialState: any, callback: any): void;

        namespace forceUpdate {
            const prototype: {
            };

        }

        namespace render {
            const prototype: {
            };

        }

        namespace setState {
            const prototype: {
            };

        }

    }

}

export namespace Panel {
    const defaultProps: {
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Block(e: any): any;

    function Header(e: any): any;

    function Icon(e: any): any;

    function Tabs(e: any): any;

    namespace Block {
        const defaultProps: {
            active: boolean;
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function active(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace active {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.active
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Panel.Block.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Header {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Panel.Header.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Icon {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Panel.Icon.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace Tabs {
        const defaultProps: {
            backgroundColor: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        function Tab(e: any): any;

        namespace Tab {
            const defaultProps: {
                active: boolean;
                backgroundColor: any;
                className: string;
                clearfix: boolean;
                clipped: boolean;
                hidden: boolean;
                invisible: boolean;
                italic: boolean;
                marginless: boolean;
                overlay: boolean;
                paddingless: boolean;
                pull: any;
                radiusless: boolean;
                renderAs: string;
                responsive: {
                };
                shadowless: boolean;
                textAlignment: any;
                textColor: any;
                textSize: any;
                textTransform: any;
                textWeight: any;
                unselectable: boolean;
            };

            const prototype: {
            };

            namespace propTypes {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const active: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const backgroundColor: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const className: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const clearfix: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const clipped: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const hidden: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const invisible: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const italic: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const marginless: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const overlay: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const paddingless: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const pull: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const radiusless: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const renderAs: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const responsive: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const shadowless: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const textAlignment: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const textColor: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const textSize: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const textTransform: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const textWeight: any;

                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.Tab.propTypes
                const unselectable: any;

            }

        }

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.shadowless
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Panel.Tabs.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Progress {
    const defaultProps: {
        backgroundColor: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function max(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function value(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Section {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Table {
    const defaultProps: {
        backgroundColor: any;
        bordered: boolean;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        responsive: {
        };
        shadowless: boolean;
        size: string;
        striped: boolean;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function bordered(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function striped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace bordered {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace striped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Tabs {
    const defaultProps: {
        align: any;
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        fullwidth: boolean;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        type: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Tab(e: any): any;

    namespace Tab {
        const defaultProps: {
            active: boolean;
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            renderAs: string;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function active(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace active {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.active
                const isRequired: any;

            }

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.clipped
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.radiusless
                const isRequired: any;

            }

            namespace renderAs {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.renderAs
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Tabs.Tab.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function align(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function fullwidth(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function type(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace align {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace fullwidth {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace type {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Tag {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        marginless: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        remove: boolean;
        renderAs: string;
        responsive: {
        };
        rounded: boolean;
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
    };

    const prototype: {
    };

    function Group(e: any): any;

    namespace Group {
        const defaultProps: {
            backgroundColor: any;
            children: any;
            className: string;
            clearfix: boolean;
            clipped: boolean;
            gapless: boolean;
            hidden: boolean;
            invisible: boolean;
            italic: boolean;
            marginless: boolean;
            overlay: boolean;
            paddingless: boolean;
            pull: any;
            radiusless: boolean;
            responsive: {
            };
            shadowless: boolean;
            style: {
            };
            textAlignment: any;
            textColor: any;
            textSize: any;
            textTransform: any;
            textWeight: any;
            unselectable: boolean;
        };

        const prototype: {
        };

        namespace propTypes {
            function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function gapless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

            namespace backgroundColor {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.backgroundColor
                const isRequired: any;

            }

            namespace children {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.children
                const isRequired: any;

            }

            namespace className {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.className
                const isRequired: any;

            }

            namespace clearfix {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.clearfix
                const isRequired: any;

            }

            namespace clipped {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.clipped
                const isRequired: any;

            }

            namespace gapless {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.gapless
                const isRequired: any;

            }

            namespace hidden {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.hidden
                const isRequired: any;

            }

            namespace invisible {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.invisible
                const isRequired: any;

            }

            namespace italic {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.italic
                const isRequired: any;

            }

            namespace marginless {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.marginless
                const isRequired: any;

            }

            namespace overlay {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.overlay
                const isRequired: any;

            }

            namespace paddingless {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.paddingless
                const isRequired: any;

            }

            namespace pull {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.pull
                const isRequired: any;

            }

            namespace radiusless {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.radiusless
                const isRequired: any;

            }

            namespace responsive {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.responsive
                const isRequired: any;

            }

            namespace shadowless {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.shadowless
                const isRequired: any;

            }

            namespace style {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.style
                const isRequired: any;

            }

            namespace textAlignment {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.textAlignment
                const isRequired: any;

            }

            namespace textColor {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.textColor
                const isRequired: any;

            }

            namespace textSize {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.textSize
                const isRequired: any;

            }

            namespace textTransform {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.textTransform
                const isRequired: any;

            }

            namespace textWeight {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.textWeight
                const isRequired: any;

            }

            namespace unselectable {
                // Too-deep object hierarchy from react_bulma_components.Tag.Group.propTypes.unselectable
                const isRequired: any;

            }

        }

    }

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function remove(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function rounded(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace remove {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace rounded {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}

export namespace Tile {
    const defaultProps: {
        backgroundColor: any;
        children: any;
        className: string;
        clearfix: boolean;
        clipped: boolean;
        color: any;
        hidden: boolean;
        invisible: boolean;
        italic: boolean;
        kind: any;
        marginless: boolean;
        notification: boolean;
        overlay: boolean;
        paddingless: boolean;
        pull: any;
        radiusless: boolean;
        renderAs: string;
        responsive: {
        };
        shadowless: boolean;
        size: any;
        style: {
        };
        textAlignment: any;
        textColor: any;
        textSize: any;
        textTransform: any;
        textWeight: any;
        unselectable: boolean;
        vertical: boolean;
    };

    const prototype: {
    };

    namespace propTypes {
        function backgroundColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function children(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function className(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clearfix(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function clipped(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function color(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function hidden(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function invisible(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function italic(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function kind(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function marginless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function notification(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function overlay(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function paddingless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function pull(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function radiusless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function renderAs(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function responsive(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function shadowless(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function size(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function style(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textAlignment(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textSize(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textTransform(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function textWeight(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function unselectable(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        function vertical(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        namespace backgroundColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace children {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace className {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clearfix {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace clipped {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace color {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace hidden {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace invisible {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace italic {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace kind {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace marginless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace notification {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace overlay {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace paddingless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace pull {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace radiusless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace renderAs {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace responsive {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace shadowless {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace size {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace style {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textAlignment {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textColor {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textSize {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textTransform {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace textWeight {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace unselectable {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

        namespace vertical {
            function isRequired(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): any;

        }

    }

}
}
